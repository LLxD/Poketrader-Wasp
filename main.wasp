app Poketrader {
  wasp: {
    version: "^0.11.1"
  },
  title: "Poketrader",
  client: {
    rootComponent: import { Layout } from "@client/Layout.jsx",
  },
  dependencies: [
    ("pokedex-promise-v2","^4.1.1")
  ],
  db: {
    prisma: {
      clientPreviewFeatures: ["extendedWhereUnique"],
    },
      system: PostgreSQL,
  },
  auth: {
    userEntity: User,
    methods: {
      usernameAndPassword: {}
    },
    onAuthFailedRedirectTo: "/login",
    onAuthSucceededRedirectTo: "/"
  },
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/pages/auth/Login.jsx"
}
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/pages/auth/Signup.jsx"
}

entity User {=psl
        id Int @id @default(autoincrement())
        username String @unique
        password String
        trades Trade[]
psl=}

entity Trade {=psl
    id         Int      @id @default(autoincrement())
    userId     Int
    user      User     @relation(fields: [userId], references: [id])
    tradeAreaA String
    tradeAreaB String
    fairness   String @default("unfair")
psl=}

action evaluateTrade {
  fn: import { evaluateTrade } from "@server/actions.js",
}

action registerTrade {
  fn: import { registerTrade } from "@server/actions.js",
  entities: [Trade, User]
}

query getUserTrades {
  fn: import { getUserTrades } from "@server/queries.js",
  entities: [Trade, User]
}

query getPokemon {
  fn: import { getPokemon } from "@server/queries.js",
}

route TradeRoute { path: "/trade", to: TradePage }
page TradePage {
  component: import { Trade } from "@client/pages/Trade.jsx",
  authRequired: true
}

route ProfileRoute { path: "/profile", to: ProfilePage }
page ProfilePage {
  component: import { Profile } from "@client/pages/Profile.jsx",
  authRequired: true
}

route HomePageRoute { path: "/", to: HomePage }
page HomePage {
  component: import { HomePage } from "@client/pages/Home.jsx",
  authRequired: false
}